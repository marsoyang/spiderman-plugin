<?xml version="1.0" encoding="UTF-8"?>
<!--
  | Spiderman Java开源垂直网络爬虫 
  | author: l.weiwei@163.com
  | blog: http://laiweiweihi.iteye.com
  | qq: 493781187
  | time: 2013-01-08 16:12
-->
<beans>
	<!--
	  | name:名称
	  | url:种子链接
	  | reqDelay:{n}s|{n}m|{n}h|n每次请求之前延缓时间
	  | enable:0|1是否开启本网站的抓取
	  | charset:网站字符集
	  | schedule:调度时间，每隔多长时间重新从种子链接抓取
	  | thread:分配给本网站爬虫的线程数
	  | waitQueue:当任务队列空的时候爬虫等待多长时间再索取任务
	-->
	<site name="moxdeals" url="http://www.moxdeals.sg/deal/home" reqDelay="0.1s" enable="1" charset="utf-8" schedule="1h" thread="2" waitQueue="5s">
		<!--
		  | HTTP Header
		<headers>
			<header name="" value="" />
		</headers>-->
		<!--
		  | HTTP Cookie
		<cookies>
			<cookie name="" value="" domain="" path="" />
		</cookies>-->
		<!--
		  | 进入任务队列的URL规则
		  | policy:多个rule的策略，暂时只实现了and，未来会有or
		-->
		<queueRules policy="and">
			<!--
			  | 规则
			  | type:规则类型，包括 regex | equal | start | end | contains 所有规则可以在前面添加 "!" 表示取反
			  | value:值
			-->
			<rule type="!regex" value="^.*\.(jpg|png|gif).*$" />
		</queueRules>
		<!--
		  | 抓取目标
		-->
		<targets>
			<!--
			  | name:目标名称	
			-->
			<target name="deal">
				<!--
				  | 限制目标URL的来源
				-->
				<sourceRules policy="and">
					<rule type="regex" value="" />
				</sourceRules>
				<!--
				  | 目标URL的规则
				-->
				<urlRules policy="and">
					<rule type="regex" value="^.*/deals/.*$" />
				</urlRules>
				<!--
				  | 目标网页的数据模型
				-->
				<model>
					<!--
					  | 属性的配置
					  | name:属性名称
					  | parser:针对该属性的解析规则
					-->
					<field name="name">
						<!--
						  | xpath: XPath规则，如果目标页面是XML，则可以使用2.0语法，否则HTML的话暂时只能1.0
						  | attribute:当使用XPath解析后的内容不是文本而是一个Node节点对象的时候，可以给定一个属性名获取其属性值例如<img src="" />
						  | regex:当使用XPath（包括attribute）规则获取到的文本内容不满足需求时，可以继续设置regex正则表达式进行解析
						  | exp:当使用XPath获取的文本(如果获取的不是文本则会先执行exp而不是regex否则先执行regex)不满足需求时，可以继续这是exp表达式进行解析
						  |     exp表达式有几个内置对象和方法:
						  |     $output(Node): 这个是内置的output函数，作用是输出某个XML节点的结构内容。参数是一个XML节点对象，可以通过XPath获得
						  |     $this: 当使用XPath获取到的是Node节点时，这个表示节点对象，否则表示Java的字符串对象,可以调用Java字符串API进行处理
						  |     $Tags: 这个是内置的用于过滤标签的工具类 
						  |            $Tags.xml($output($this)).rm('p').ok()
						  |            $Tags.xml($this).rm('p').empty().ok()
						  |     $Attrs: 这个是内置的用于过滤属性的工具类
						  |            $Attrs.xml($this).rm('style').ok()
						  |            $Attrs.xml($this).tag('img').rm('src').ok()
						  |     
						  |            $Tags和$Attrs可以一起使用: 
						  |            $Tags.xml($this).rm('p').Attrs().rm('style').ok()
						  |            $Attrs.xml($this).rm('style').Tags().rm('p').ok()
						-->
						<parser xpath="//title/text()"/>
					</field>
					<field name="oldImg" isArray="1">
						<parser xpath="//link[@rel='image_src']" attribute="href"/>
					</field>
					<field name="oldImg" isArray="1">
						<parser xpath="//div[@class='textContent']//p//img[@src]" attribute="src"/>
					</field>
					<field name="price">
						<parser xpath="//div[@class='dealHomePrice']/div[@class='price4']/span[3]/b[@class='red']/text()" regex="\d+\.\d+"/>
					</field>
					<field name="originalPrice">
						<parser xpath="//div[@class='dealHomePrice']/div[@class='price4']/span[1]/b[@class='lineThrough']/text()" regex="\d+\.\d+"/>
					</field>
					<field name="countBought">
						<parser xpath="//div[@class='dealHomeInfo']/div[@class='boughtDeal boughtDeal1']/b[@class='right']/text()" regex="\d+" />
					</field>
					<field name="expiryTime" isArray="1">
						<parser xpath="//script/text()" regex="new Date\(\d+\)" exp="$this.replace('new Date(', '').replace(')', '').substring(0,10)"/>
					</field>
					<field name="highlight">
						<parser xpath="//div[@class='conditions highlights span-6']" exp="$Tags.xml($output($this)).rm('h3').empty().exe().rm('div').Attrs().rm('style').ok()"/>
					</field>
					<field name="condition">
						<parser xpath="//div[@class='conditions span-5 last']" exp="$Tags.xml($output($this)).rm('h3').empty().exe().rm('div').Attrs().rm('style').ok()"/>
					</field>
					<field name="description">
						<parser xpath="//div[@class='textContent']" exp="$Tags.xml($output($this)).rm('object').empty().exe().rm('div').Attrs().rm('style').ok()"/>
					</field>
					<field name="address" isArray="1">
						<parser xpath="//address/text()" />
					</field>
					<field name="postCode" isArray="1">
						<parser xpath="//address/text()" regex="\d{6}"/>
					</field>
				</model>
			</target>
		</targets>
		<!--
		  | 插件
		-->
		<plugins>
			<!--
			  | enable:是否开启
			  | name:插件名
			  | version:插件版本
			  | desc:插件描述
			-->
			<plugin enable="1" name="spider_plugin" version="0.0.1" desc="这是一个官方实现的默认插件，实现了所有扩展点。">
				<!--
				  | 每个插件包含了对若干扩展点的实现
				-->
				<extensions>
					<!--
					  | point:扩展点名它们包括  task_poll, begin, fetch, dig, dup_removal, task_sort, task_push, target, parse, pojo, end
					-->
					<extension point="task_poll">
						<!--
						  | 扩展点实现类
						  | type: 如何获取实现类 ,默认通过无参构造器实例化给定的类名，可以设置为ioc，这样就会从EWeb4J的IOC容器里获取
						  | value: 当时type=ioc的时候填写IOC的bean_id，否则填写完整类名
						  | sort: 排序，同一个扩展点有多个实现类，这些实现类会以责任链的方式进行执行，因此它们的执行顺序将变得很重要
						-->
						<impl type="" value="spiderman.plugin.impl.TaskPollPointImpl" sort="0"/>
					</extension>
					<extension point="begin">
						<impl type="" value="spiderman.plugin.impl.BeginPointImpl" sort="0"/>
					</extension>
					<extension point="fetch">
						<impl type="" value="spiderman.plugin.impl.FetchPointImpl" sort="0"/>
					</extension>
					<extension point="dig">
						<impl type="" value="spiderman.plugin.impl.DigPointImpl" sort="0"/>
					</extension>
					<extension point="dup_removal">
						<impl type="" value="spiderman.plugin.impl.DupRemovalPointImpl" sort="0"/>
					</extension>
					<extension point="task_sort">
						<impl type="" value="spiderman.plugin.impl.TaskSortPointImpl" sort="0"/>
					</extension>
					<extension point="task_push">
						<impl type="" value="spiderman.plugin.impl.TaskPushPointImpl" sort="0"/>
					</extension>
					<extension point="target">
						<impl type="" value="spiderman.plugin.impl.TargetPointImpl" sort="0"/>
					</extension>
					<extension point="parse">
						<impl type="" value="spiderman.plugin.impl.ParsePointImpl" sort="0"/>
					</extension>
					<extension point="end">
						<impl type="" value="spiderman.plugin.impl.EndPointImpl" sort="0"/>
					</extension>
				</extensions>
				<providers>
					<provider>
						<orgnization name="深圳优扣科技有限公司" website="" desc="致力于打造一流的社交分享购物社区!">
							<author name="weiwei" website="http://laiweiweihi.iteye.com" email="l.weiwei@163.com" weibo="http://weibo.com/weiweimiss" desc="一个喜欢自由、音乐、绘画的IT老男孩" />
						</orgnization>
					</provider>
				</providers>
			</plugin>
		</plugins>
	</site>
</beans>
